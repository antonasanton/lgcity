{"name": "test_open_random_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"swiper-slide swiper-slide-active\" style=\"width: 41.2857px;\">...</div> is not clickable at point (379, 726). Other element would receive the click: <div class=\"wrapper\">...</div>\n  (Session info: chrome=131.0.6778.205)\nStacktrace:\n0   chromedriver                        0x0000000100783af0 cxxbridge1$str$ptr + 3651580\n1   chromedriver                        0x000000010077c340 cxxbridge1$str$ptr + 3620940\n2   chromedriver                        0x00000001001e44b4 cxxbridge1$string$len + 89224\n3   chromedriver                        0x000000010022e12c cxxbridge1$string$len + 391424\n4   chromedriver                        0x000000010022c77c cxxbridge1$string$len + 384848\n5   chromedriver                        0x000000010022a6c0 cxxbridge1$string$len + 376468\n6   chromedriver                        0x0000000100229af8 cxxbridge1$string$len + 373452\n7   chromedriver                        0x000000010021efbc cxxbridge1$string$len + 329616\n8   chromedriver                        0x000000010021ea10 cxxbridge1$string$len + 328164\n9   chromedriver                        0x00000001002620fc cxxbridge1$string$len + 604368\n10  chromedriver                        0x000000010021d0b0 cxxbridge1$string$len + 321668\n11  chromedriver                        0x000000010021dd00 cxxbridge1$string$len + 324820\n12  chromedriver                        0x000000010074ee34 cxxbridge1$str$ptr + 3435328\n13  chromedriver                        0x000000010075214c cxxbridge1$str$ptr + 3448408\n14  chromedriver                        0x00000001007361a8 cxxbridge1$str$ptr + 3333812\n15  chromedriver                        0x0000000100752a0c cxxbridge1$str$ptr + 3450648\n16  chromedriver                        0x00000001007279b4 cxxbridge1$str$ptr + 3274432\n17  chromedriver                        0x000000010076d120 cxxbridge1$str$ptr + 3558956\n18  chromedriver                        0x000000010076d29c cxxbridge1$str$ptr + 3559336\n19  chromedriver                        0x000000010077bfb4 cxxbridge1$str$ptr + 3620032\n20  libsystem_pthread.dylib             0x00000001950002e4 _pthread_start + 136\n21  libsystem_pthread.dylib             0x0000000194ffb0fc thread_start + 8", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"87dd847f315499969a004e647fb6b75a\")>\n\n    def test_open_random_product(driver):\n        catalog_page = CatalogPage(driver)\n        catalog_page.open_catalog()\n>       catalog_page.open_random_product()\n\ntest_catalog.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/catalog_page.py:22: in open_random_product\n    random_card.click()\n../.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10418cd60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...0001950002e4 _pthread_start + 136\\\\n21  libsystem_pthread.dylib             0x0000000194ffb0fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"swiper-slide swiper-slide-active\" style=\"width: 41.2857px;\">...</div> is not clickable at point (379, 726). Other element would receive the click: <div class=\"wrapper\">...</div>\nE         (Session info: chrome=131.0.6778.205)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100783af0 cxxbridge1$str$ptr + 3651580\nE       1   chromedriver                        0x000000010077c340 cxxbridge1$str$ptr + 3620940\nE       2   chromedriver                        0x00000001001e44b4 cxxbridge1$string$len + 89224\nE       3   chromedriver                        0x000000010022e12c cxxbridge1$string$len + 391424\nE       4   chromedriver                        0x000000010022c77c cxxbridge1$string$len + 384848\nE       5   chromedriver                        0x000000010022a6c0 cxxbridge1$string$len + 376468\nE       6   chromedriver                        0x0000000100229af8 cxxbridge1$string$len + 373452\nE       7   chromedriver                        0x000000010021efbc cxxbridge1$string$len + 329616\nE       8   chromedriver                        0x000000010021ea10 cxxbridge1$string$len + 328164\nE       9   chromedriver                        0x00000001002620fc cxxbridge1$string$len + 604368\nE       10  chromedriver                        0x000000010021d0b0 cxxbridge1$string$len + 321668\nE       11  chromedriver                        0x000000010021dd00 cxxbridge1$string$len + 324820\nE       12  chromedriver                        0x000000010074ee34 cxxbridge1$str$ptr + 3435328\nE       13  chromedriver                        0x000000010075214c cxxbridge1$str$ptr + 3448408\nE       14  chromedriver                        0x00000001007361a8 cxxbridge1$str$ptr + 3333812\nE       15  chromedriver                        0x0000000100752a0c cxxbridge1$str$ptr + 3450648\nE       16  chromedriver                        0x00000001007279b4 cxxbridge1$str$ptr + 3274432\nE       17  chromedriver                        0x000000010076d120 cxxbridge1$str$ptr + 3558956\nE       18  chromedriver                        0x000000010076d29c cxxbridge1$str$ptr + 3559336\nE       19  chromedriver                        0x000000010077bfb4 cxxbridge1$str$ptr + 3620032\nE       20  libsystem_pthread.dylib             0x00000001950002e4 _pthread_start + 136\nE       21  libsystem_pthread.dylib             0x0000000194ffb0fc thread_start + 8\n\n../.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "start": 1735191685163, "stop": 1735191693772, "uuid": "f3ec9c19-8ede-4e4e-bcca-95e0c3684234", "historyId": "4439ee7fea29a1a320b14db26187fbea", "testCaseId": "4439ee7fea29a1a320b14db26187fbea", "fullName": "tests.test_catalog#test_open_random_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_catalog"}, {"name": "host", "value": "MacBook-Pro-Anton.local"}, {"name": "thread", "value": "1296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_catalog"}]}